name: CI

on: [push, pull_request, workflow_dispatch]

permissions:
  contents: "read"

defaults:
  run:
    shell: bash
env:
  FORCE_COLOR: 1

jobs:
  package:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
        with:
          persist-credentials: false

      - name: "Setup Python"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.x"
          cache: "pip"

      - name: "Check packages"
        run: |
          python -m pip install -U pip setuptools wheel build twine rstcheck
          python -m build
          rstcheck --ignore-messages "(Duplicate implicit target name:.*)" CHANGES.rst
          python -m twine check dist/*

  test:
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13", "3.14"]
        os:
          - macos-15
          - windows-latest
          - ubuntu-24.04
        nox-session: ['']
        include:
          - experimental: false
          # integration
          # 3.9 has a known issue with large SSL requests that we work around:
          # https://github.com/urllib3/urllib3/pull/3181#issuecomment-1794830698
          - python-version: "3.9"
            os: ubuntu-24.04
            experimental: false
            nox-session: test_integration
          - python-version: "3.12"
            os: ubuntu-24.04
            experimental: false
            nox-session: test_integration
          # Test with 3.12.2 for https://github.com/urllib3/urllib3/pull/3620 patch
          - python-version: "3.12.2"
            os: ubuntu-24.04
            experimental: false
            nox-session: test-3.12
          # pypy
          - python-version: "pypy-3.10"
            os: ubuntu-24.04
            experimental: false
            nox-session: test-pypy3.10
          - python-version: "pypy-3.11"
            os: ubuntu-24.04
            experimental: false
            nox-session: test-pypy3.11
          - python-version: "3.x"
          # brotli
            os: ubuntu-24.04
            experimental: false
            nox-session: test_brotlipy
          - python-version: "3.12"
            os: ubuntu-24.04
            nox-session: emscripten(node)
            experimental: true
          - python-version: "3.12"
            os: ubuntu-24.04
            nox-session: emscripten(firefox)
            experimental: true
          - python-version: "3.12"
            os: ubuntu-24.04
            nox-session: emscripten(chrome)
            experimental: true
          - python-version: 3.14
            experimental: true

    runs-on: ${{ matrix.os }}
    name: ${{ fromJson('{"macos-15":"macOS","windows-latest":"Windows","ubuntu-24.04":"Ubuntu"}')[matrix.os] }} ${{ matrix.python-version }} ${{ matrix.nox-session}}
    continue-on-error: ${{ matrix.experimental }}
    timeout-minutes: 10
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
        with:
          fetch-depth: 0 # Needed to fetch the version from git
          persist-credentials: false

      - name: "Setup Python ${{ matrix.python-version }}"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
          check-latest: true

      - name: "Install uv"
        uses: astral-sh/setup-uv@05273c154d09957eb9a2377d9c988fbda431d1c5 # v6.4.0
        with:
          version: "0.7.12"

      - name: "Install Chrome"
        uses: browser-actions/setup-chrome@b94431e051d1c52dcbe9a7092a4f10f827795416 # v2.1.0
        id: setup-chrome
        if: ${{ matrix.nox-session == 'emscripten(chrome)' }}
        with:
          install-chromedriver: true
          chrome-version: canary
      - name: Force override system chrome
        run: |
          sudo rm -f /usr/bin/google-chrome
          sudo rm -f /usr/bin/chrome
          sudo ln -s ${{ steps.setup-chrome.outputs.chrome-path }} /usr/bin/google-chrome
          sudo ln -s ${{ steps.setup-chrome.outputs.chrome-path }} /usr/bin/chrome
          google-chrome --version
        if: ${{ matrix.nox-session == 'emscripten(chrome)' }}
      - name: "Install Firefox"
        uses: browser-actions/setup-firefox@5914774dda97099441f02628f8d46411fcfbd208 # v1.7.0
        if: ${{ matrix.nox-session == 'emscripten(firefox)' }}
      - name: "Install node.js"
        uses: actions/setup-node@v4
        if: ${{ matrix.nox-session == 'emscripten(node)' }}
        with:
          node-version: 22
      - name: Cache pyodide downloads in nox cache
        uses: actions/cache@v4
        if: ${{ startsWith(matrix.nox-session, 'emscripten') }}
        with:
          path: .nox/.cache
          # noxfile.py contains the Pyodide version used currently.
          key: pyodide-downloads-${{ hashFiles('noxfile.py') }}

      # https://github.com/wntrblm/nox/issues/986
      - name: Create symlink to python.exe to help nox find Python
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          mklink "%Python3_ROOT_DIR%\python${{ matrix.python-version }}.exe" "%Python3_ROOT_DIR%\python.exe"

      - name: "Run tests"
        run: |
          uvx nox -s "$NOX_SESSION"
        env:
          # If no explicit nox-session is set, run the default tests for the chosen Python version
          NOX_SESSION: ${{ matrix.nox-session != '' && matrix.nox-session || format('test-{0}', matrix.python-version) }}

      - name: "Upload coverage data"
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: coverage-data-${{ matrix.python-version }}-${{ matrix.os }}-${{ matrix.experimental }}-${{ matrix.nox-session }}
          path: ".coverage.*"
          if-no-files-found: error


  coverage:
    if: always()
    runs-on: "ubuntu-24.04"
    needs: test
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@0ad4b8fadaa221de15dcec353f45205ec38ea70b # v4.1.4
        with:
          persist-credentials: false

      - name: "Setup Python"
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: "3.x"

      - name: "Install uv"
        uses: astral-sh/setup-uv@05273c154d09957eb9a2377d9c988fbda431d1c5 # v6.4.0
        with:
          version: "0.7.12"

      - name: "Install coverage"
        # Install the same version of coverage as in the lock file.
        run: uv sync --dev --frozen

      - name: "Download coverage data"
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          pattern: coverage-data-*
          merge-multiple: true

      - name: "Combine & check coverage"
        run: |
          uv run -m build
          uv run -m coverage combine
          uv run -m coverage html --skip-covered --skip-empty
          uv run -m coverage report --ignore-errors --show-missing --fail-under=100

      - if: ${{ failure() }}
        name: "Upload report if check failed"
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: coverage-report
          path: htmlcov
